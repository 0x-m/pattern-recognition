# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jlf9MN_vmaZ5CuR2GPMGI1TifIAgX8wa
"""

import numpy as np
import pandas as pd

#loading datasets------------------------
x_train = pd.read_csv("drive/MyDrive/mnist/Train_Data.csv").to_numpy()
y_train = pd.read_csv("drive/MyDrive/mnist/Train_labels.csv").to_numpy()
x_test = pd.read_csv("drive/MyDrive/mnist/Test_Data.csv").to_numpy()
y_test = pd.read_csv("drive/MyDrive/mnist/Test_labels.csv").to_numpy()
#----------------------------------------

#-------------------------------------------------------------------------------
def KNN(x_train,y_train,x):
  n_samples = x_train.shape[0]
  dists = np.zeros((n_samples,1))
  for i in range(n_samples):
    dists[i,0] = np.linalg.norm(x - x_train[i]) #euclidean norm

  t = np.argsort(dists[:,0]) #sort indices based on calculated distances ascendingly
 
  y_pred = np.zeros((3,1)) #reserve three placeholder for k = 1, 3, 5

  y_pred[0] = int(y_train[int(t[0])]) # k = 1 Nearset Neighbor

#-------------------------(K = 3)------------------------------
  #counting occurance of classes in top 3 nearset neighbors
  freq = np.zeros((10,1)) 
  k = 3
  for i in range(k): # k = 3
    freq[int(y_train[t[i]])] += 1

  #sort class indices base on number of occurance
  freq_arg = np.argsort(freq[:,0]) #ascending
  freq_arg = freq_arg[::-1] #turns to descending
  y_pred[1] = freq_arg[0] #pick majory 
#-----------------------------------------------------------------

#------------------------(K = 5)----------------------------------

  freq = np.zeros((10,1))
  k = 5
  for i in range(k):
    freq[int(y_train[t[i]])] += 1
  
  freq_arg = np.argsort(freq[:,0])
  freq_arg = freq_arg[::-1]
  y_pred[2] = freq_arg[0]
#-----------------------------------------------------------------
  return y_pred #end KNN function
#-------------------------------------------------------------------------------

#--------------------------Compute accuracy-------------------------------------
def evaluate(y_pred,y_test):
  n_samples = y_pred.shape[0]
  n_corrects = 0
  for i in range(n_test_samples):
    if(y_pred[i] == y_test[i]):
      n_corrects += 1
  acc = n_corrects / n_samples
  return acc
#-------------------------------------------------------------------------------

#------------------------------------PROBLEM 3----------------------------
n_test_samples = x_test.shape[0]
y_pred = np.zeros((n_test_samples,3))

for i in range(n_test_samples):
  y_pred[i] = KNN(x_train,y_train,x_test[i]).reshape((3,))

print("Accuracy for k = 1:\t",evaluate(y_pred[:,0],y_test))
print("Accuracy for k = 3:\t",evaluate(y_pred[:,1],y_test))
print("Accuracy for k = 5:\t",evaluate(y_pred[:,2],y_test))
#-------------------------------------------------------------------------